Edit logic 

// ----------

  {editProduct &&(
        <Row className="my-4">
          <Col>
            <h2>Edit Product</h2>
            <Form>
              <Form.Group className="mb-3" controlId="productTitle">
                <Form.Label>Title</Form.Label>
                <Form.Control
                  type="text"
                  value={updateProduct.title}
                  onChange={(e) => setUpdateProduct({ ...updateProduct, title: e.target.value })}
                />
              </Form.Group>

              <Form.Group className="mb-3" controlId="productPrice">
                <Form.Label>Price</Form.Label>
                <Form.Control
                  type="number"
                  value={updateProduct.price}
                  onChange={(e) => setUpdateProduct({ ...updateProduct, price: e.target.value })}
                />
              </Form.Group>

              <Form.Group className="mb-3" controlId="productDescription">
                <Form.Label>Description</Form.Label>
                <Form.Control
                  as="textarea"
                  rows={3}
                  value={updateProduct.description}
                  onChange={(e) => setUpdateProduct({ ...updateProduct, description: e.target.value })}
                />
              </Form.Group>

              <Button variant="primary" onClick={() => updateProductHandler(editProduct.id)}>
                Update Product
              </Button>
              <Button variant="secondary" onClick={() => setEditProduct(null)} className="ms-2">
                Cancel
              </Button>
            </Form>
          </Col>
        </Row>
      )}

// ----------------------------

  const updateProductHandler = async (id) => {
    try {
      Products(products.map((prod) => (prod.id === id ? response.data : prod)));
      const response = await axios.put(`https://fakestoreapi.com/products/${id}`, updateProduct);
      setEditProduct(null);
      Swal.fire("Success", "Product updated successfully!", "success");
    } catch (error) {
      console.error("Error updating product:", error);
      Swal.fire("Error", "There was an error updating the product.", "error");
    }
  };

  // --------------------------------------------------------

  const handleEditProduct = (product) => {
    setEditProduct(product);
    setUpdateProduct({ title: product.title, price: product.price, description: product.description });
  };

  // ----------------------------------------------
              // onEdit={() => handleEditProduct(product)}


// ----------------------------------------
    const [editProduct, setEditProduct] = useState(null);
    const [updateProduct, setUpdateProduct] = useState({ title: "", price: "", description: "" });























// import React, { useState } from "react";
// import { useDispatch } from "react-redux";
// import { useNavigate } from "react-router-dom";
// import axios from "axios";
// import Swal from "sweetalert2";
// import { add } from "../redux/counter/cartSlice";

// // Reusable logic functions
// export const useProductActions = () => {
//   const dispatch = useDispatch();
//   const navigate = useNavigate();
//   const [products, setProducts] = useState([]);
//   const [editProduct, setEditProduct] = useState(null);
//   const [updateProduct, setUpdateProduct] = useState({});

//   // Update product handler
//   const updateProductHandler = async (id) => {
//     try {
//       const response = await axios.put(
//         `https://fakestoreapi.com/products/${id}`,
//         updateProduct
//       );
//       setProducts(products.map((prod) => (prod.id === id ? response.data : prod)));
//       setEditProduct(null);
//       Swal.fire("Success", "Product updated successfully!", "success");
//     } catch (error) {
//       console.error("Error updating product:", error);
//       Swal.fire("Error", "There was an error updating the product.", "error");
//     }
//   };

//   // Delete product handler
//   const handleDeleteProduct = async (id) => {
//     try {
//       const result = await Swal.fire({
//         title: "Are you sure?",
//         text: "Delete This Product",
//         icon: "warning",
//         showCancelButton: true,
//         confirmButtonColor: "#DD6B55",
//         confirmButtonText: "Yes, delete it!",
//         cancelButtonText: "No, cancel please!",
//       });

//       if (result.isConfirmed) {
//         await axios.delete(`https://fakestoreapi.com/products/${id}`);
//         setProducts(products.filter((product) => product.id !== id));
//         Swal.fire("Deleted!", "Your product has been deleted.", "success");
//       } else {
//         Swal.fire("Cancelled", "Your product is safe", "error");
//       }
//     } catch (error) {
//       console.error("Error deleting product:", error);
//       Swal.fire("Error", "There was an error deleting the product.", "error");
//     }
//   };

//   // Add product to cart
//   const handleAddToCart = (product, setAddedToCart) => {
//     dispatch(add(product));
//     if (setAddedToCart) setAddedToCart(true);
//   };

//   // Edit product handler
//   const handleEditProduct = (product) => {
//     setEditProduct(product);
//     setUpdateProduct({
//       title: product.title,
//       price: product.price,
//       description: product.description,
//     });
//   };

//   // Handle cancel edit
//   const handleCancelEdit = () => {
//     setEditProduct(null);
//   };

//   // Navigate to the cart page
//   const handleViewCart = () => {
//     navigate("/Cart");
//   };

//   return {
//     handleDeleteProduct,
//     handleAddToCart,
//     handleEditProduct,
//     handleCancelEdit,
//     handleViewCart,
//     editProduct,
//     updateProductHandler,
//     updateProduct,
//     setUpdateProduct,
//   };
// };
// export default useProductActions ;

///-----------------------------------------

// src/UserList.js
import axios from "axios";
import React, { useEffect, useState } from "react";
import { Container, Row, Col, Button, Form } from "react-bootstrap";
import Swal from "sweetalert2";

const UserList = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingUserId, setEditingUserId] = useState(null);
  const [editedUser, setEditedUser] = useState({
    firstname: "",
    lastname: "",
    email: "",
    phone: "",
    address: {
      street: "",
      city: "",
    },
  });

  const [isAddingNewUser, setIsAddingNewUser] = useState(false);
  const [newUser, setNewUser] = useState({
    firstname: "",
    lastname: "",
    email: "",
    phone: "",
    address: {
      street: "",
      city: "",
    },
  });

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await fetch("https://fakestoreapi.com/users");
        if (!response.ok) {
          throw new Error("Failed to fetch users");
        }
        const data = await response.json();
        setUsers(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  // Delete user handler
  const handleDelete = async (id) => {
    try {
      const result = await Swal.fire({
        title: "Are you sure?",
        text: "Delete This User",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "No, cancel please!",
      });

      if (result.isConfirmed) {
        await axios.delete(`https://fakestoreapi.com/users/${id}`);
        setUsers(users.filter((user) => user.id !== id));
        Swal.fire("Deleted!", "Your user has been deleted.", "success");
      }
    } catch (error) {
      console.error("Error deleting user:", error);
      Swal.fire("Error", "There was an error deleting the user.", "error");
    }
  };

  // Edit button handler
  const handleEditClick = (user) => {
    setEditingUserId(user.id);
    setEditedUser({
      firstname: user.name.firstname,
      lastname: user.name.lastname,
      email: user.email,
      phone: user.phone,
      address: {
        street: user.address.street,
        city: user.address.city,
      },
    });
  };

  // Save edited user handler
  const handleSave = async (userId) => {
    try {
      const updatedUser = {
        name: {
          firstname: editedUser.firstname,
          lastname: editedUser.lastname,
        },
        email: editedUser.email,
        phone: editedUser.phone,
        address: {
          street: editedUser.address.street,
          city: editedUser.address.city,
        },
      };

      const response = await axios.put(
        `https://fakestoreapi.com/users/${userId}`,
        updatedUser
      );

      setUsers(
        users.map((user) =>
          user.id === userId ? { ...user, ...response.data } : user
        )
      );

      Swal.fire("Success", "User updated successfully!", "success");
      setEditingUserId(null);
      setEditedUser({
        firstname: "",
        lastname: "",
        email: "",
        phone: "",
        address: { street: "", city: "" },
      });
    } catch (error) {
      console.error("Error updating user:", error);
      Swal.fire("Error", "There was an error updating the user.", "error");
    }
  };

  // Cancel editing handler
  const handleCancel = () => {
    setEditingUserId(null);
    setEditedUser({
      firstname: "",
      lastname: "",
      email: "",
      phone: "",
      address: { street: "", city: "" },
    });
  };

  // Handle adding new user
  const handleAddNewUser = async () => {
    try {
      const response = await axios.post("https://fakestoreapi.com/users", {
        name: {
          firstname: newUser.firstname,
          lastname: newUser.lastname,
        },
        email: newUser.email,
        phone: newUser.phone,
        address: {
          street: newUser.address.street,
          city: newUser.address.city,
        },
      });

      setUsers([...users, response.data]);
      Swal.fire("Success", "New user added successfully!", "success");
      setIsAddingNewUser(false);
      setNewUser({
        firstname: "",
        lastname: "",
        email: "",
        phone: "",
        address: { street: "", city: "" },
      });
    } catch (error) {
      console.error("Error adding new user:", error);
      Swal.fire("Error", "There was an error adding the new user.", "error");
    }
  };

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>Error: {error}</p>;
  }

  return (
    <Container className="user-container my-5">
      <h2 className="mb-4">User List</h2>
      <Button
        variant="success"
        className="mb-3"
        onClick={() => setIsAddingNewUser(!isAddingNewUser)}
      >
        {isAddingNewUser ? "Cancel" : "Add New User"}
      </Button>

      {isAddingNewUser && (
        <Form className="mb-4">
          <Row>
            <Col md={2}>
              <Form.Control
                type="text"
                value={newUser.firstname}
                onChange={(e) =>
                  setNewUser({ ...newUser, firstname: e.target.value })
                }
                placeholder="First Name"
                className="mb-2"
              />
            </Col>
            <Col md={2}>
              <Form.Control
                type="text"
                value={newUser.lastname}
                onChange={(e) =>
                  setNewUser({ ...newUser, lastname: e.target.value })
                }
                placeholder="Last Name"
                className="mb-2"
              />
            </Col>
            <Col md={2}>
              <Form.Control
                type="email"
                value={newUser.email}
                onChange={(e) =>
                  setNewUser({ ...newUser, email: e.target.value })
                }
                placeholder="Email"
                className="mb-2"
              />
            </Col>
            <Col md={2}>
              <Form.Control
                type="text"
                value={newUser.phone}
                onChange={(e) =>
                  setNewUser({ ...newUser, phone: e.target.value })
                }
                placeholder="Phone"
                className="mb-2"
              />
            </Col>
            <Col md={2}>
              <Form.Control
                type="text"
                value={newUser.address.street}
                onChange={(e) =>
                  setNewUser({
                    ...newUser,
                    address: { ...newUser.address, street: e.target.value },
                  })
                }
                placeholder="Street"
                className="mb-2"
              />
              <Form.Control
                type="text"
                value={newUser.address.city}
                onChange={(e) =>
                  setNewUser({
                    ...newUser,
                    address: { ...newUser.address, city: e.target.value },
                  })
                }
                placeholder="City"
                className="mb-2"
              />
            </Col>
            <Col md={2}>
              <Button variant="primary" onClick={handleAddNewUser}>
                Save User
              </Button>
            </Col>
          </Row>
        </Form>
      )}

      <Row className="fw-bold py-2 bg-light text-center">
        <Col md={2}>Name</Col>
        <Col md={2}>Email</Col>
        <Col md={2}>Phone</Col>
        <Col md={2}>Address</Col>
        <Col md={2}>Actions</Col>
      </Row>
      {users.map((user) => (
        <Row
          className="border-bottom py-3 align-items-center text-center"
          key={user.id}
        >
          <Col md={2}>
            {editingUserId === user.id ? (
              <Form>
                <Form.Control
                  type="text"
                  value={editedUser.firstname}
                  onChange={(e) =>
                    setEditedUser({ ...editedUser, firstname: e.target.value })
                  }
                  placeholder="First Name"
                  className="mb-2"
                />
                <Form.Control
                  type="text"
                  value={editedUser.lastname}
                  onChange={(e) =>
                    setEditedUser({ ...editedUser, lastname: e.target.value })
                  }
                  placeholder="Last Name"
                  className="mb-2"
                />
              </Form>
            ) : (
              <>
                {user.name.firstname} {user.name.lastname}
              </>
            )}
          </Col>
          <Col md={2}>
            {editingUserId === user.id ? (
              <Form.Control
                type="email"
                value={editedUser.email}
                onChange={(e) =>
                  setEditedUser({ ...editedUser, email: e.target.value })
                }
                placeholder="Email"
                className="mb-2"
              />
            ) : (
              user.email
            )}
          </Col>
          <Col md={2}>
            {editingUserId === user.id ? (
              <Form.Control
                type="text"
                value={editedUser.phone}
                onChange={(e) =>
                  setEditedUser({ ...editedUser, phone: e.target.value })
                }
                placeholder="Phone"
                className="mb-2"
              />
            ) : (
              user.phone
            )}
          </Col>
          <Col md={2}>
            {editingUserId === user.id ? (
              <>
                <Form.Control
                  type="text"
                  value={editedUser.address.street}
                  onChange={(e) =>
                    setEditedUser({
                      ...editedUser,
                      address: { ...editedUser.address, street: e.target.value },
                    })
                  }
                  placeholder="Street"
                  className="mb-2"
                />
                <Form.Control
                  type="text"
                  value={editedUser.address.city}
                  onChange={(e) =>
                    setEditedUser({
                      ...editedUser,
                      address: { ...editedUser.address, city: e.target.value },
                    })
                  }
                  placeholder="City"
                  className="mb-2"
                />
              </>
            ) : (
              `${user.address.street}, ${user.address.city}`
            )}
          </Col>
          <Col md={2}>
            {editingUserId === user.id ? (
              <div className="d-flex align-items-center justify-content-center">
                <Button
                  variant="success"
                  size="sm"
                  onClick={() => handleSave(user.id)}
                  className="me-2"
                >
                  Save
                </Button>
                <Button variant="secondary" size="sm" onClick={handleCancel}>
                  Cancel
                </Button>
              </div>
            ) : (
              <div className="d-flex align-items-center justify-content-center">
                <Button
                  variant="primary"
                  size="sm"
                  onClick={() => handleEditClick(user)}
                  className="me-2"
                >
                  Edit
                </Button>
                <Button
                  variant="danger"
                  size="sm"
                  onClick={() => handleDelete(user.id)}
                >
                  Delete
                </Button>
              </div>
            )}
          </Col>
        </Row>
      ))}
    </Container>
  );
};

export default UserList;


// Edit Logic


// Edit button handler
  const handleEditClick = (user) => {
    setEditingUserId(user.id);
    setEditedUser({
      firstname: user.name.firstname,
      lastname: user.name.lastname,
      email: user.email,
      phone: user.phone,
      address: {
        street: user.address.street,
        city: user.address.city,
      },
    });
  };

  // Save edited user handler
  const handleSave = async (userId) => {
    try {
      const updatedUser = {
        name: {
          firstname: editedUser.firstname,
          lastname: editedUser.lastname,
        },
        email: editedUser.email,
        phone: editedUser.phone,
        address: {
          street: editedUser.address.street,
          city: editedUser.address.city,
        },
      };

      const response = await axios.put(
        `https://fakestoreapi.com/users/${userId}`,
        updatedUser
      );

      setUsers(
        users.map((user) =>
          user.id === userId ? { ...user, ...response.data } : user
        )
      );

      Swal.fire("Success", "User updated successfully!", "success");
      setEditingUserId(null);
      setEditedUser({
        firstname: "",
        lastname: "",
        email: "",
        phone: "",
        address: { street: "", city: "" },
      });
    } catch (error) {
      console.error("Error updating user:", error);
      Swal.fire("Error", "There was an error updating the user.", "error");
    }
  };

  // Cancel editing handler
  const handleCancel = () => {
    setEditingUserId(null);
    setEditedUser({
      firstname: "",
      lastname: "",
      email: "",
      phone: "",
      address: { street: "", city: "" },
    });
  };

// return statement

 <Col md={2}>
            {editingUserId === user.id ? (
              <Form>
                <Form.Control
                  type="text"
                  value={editedUser.firstname}
                  onChange={(e) =>
                    setEditedUser({ ...editedUser, firstname: e.target.value })
                  }
                  placeholder="First Name"
                  className="mb-2"
                />
                <Form.Control
                  type="text"
                  value={editedUser.lastname}
                  onChange={(e) =>
                    setEditedUser({ ...editedUser, lastname: e.target.value })
                  }
                  placeholder="Last Name"
                  className="mb-2"
                />
              </Form>
            ) : (
              <>
                {user.name.firstname} {user.name.lastname}
              </>
            )}
          </Col>
          <Col md={2}>
            {editingUserId === user.id ? (
              <Form.Control
                type="email"
                value={editedUser.email}
                onChange={(e) =>
                  setEditedUser({ ...editedUser, email: e.target.value })
                }
                placeholder="Email"
                className="mb-2"
              />
            ) : (
              user.email
            )}
          </Col>
          <Col md={2}>
            {editingUserId === user.id ? (
              <Form.Control
                type="text"
                value={editedUser.phone}
                onChange={(e) =>
                  setEditedUser({ ...editedUser, phone: e.target.value })
                }
                placeholder="Phone"
                className="mb-2"
              />
            ) : (
              user.phone
            )}
          </Col>
          <Col md={2}>
            {editingUserId === user.id ? (
              <>
                <Form.Control
                  type="text"
                  value={editedUser.address.street}
                  onChange={(e) =>
                    setEditedUser({
                      ...editedUser,
                      address: {
                        ...editedUser.address,
                        street: e.target.value,
                      },
                    })
                  }
                  placeholder="Street"
                  className="mb-2"
                />
                <Form.Control
                  type="text"
                  value={editedUser.address.city}
                  onChange={(e) =>
                    setEditedUser({
                      ...editedUser,
                      address: { ...editedUser.address, city: e.target.value },
                    })
                  }
                  placeholder="City"
                  className="mb-2"
                />
              </>
            ) : (
              `${user.address.street}, ${user.address.city}`
            )}
          </Col>
          <Col md={2}>
            {editingUserId === user.id ? (
              <div className="d-flex align-items-center justify-content-center">
                <Button
                  variant="success"
                  size="sm"
                  onClick={() => handleSave(user.id)}
                  className="me-2"
                >
                  Save
                </Button>
                <Button variant="secondary" size="sm" onClick={handleCancel}>
                  Cancel
                </Button>
              </div>
            ) : (
              <div className="d-flex align-items-center justify-content-center">
                <Button
                  variant="primary"
                  size="sm"
                  onClick={() => handleEditClick(user)}
                  className="me-2"
                >
                  Edit
                </Button>
                <Button
                  variant="danger"
                  size="sm"
                  onClick={() => handleDelete(user.id)}
                >
                  Delete
                </Button>
              </div>
            )}
          </Col>




          import axios from 'axios';

const createUser = async () => {
  try {
    const response = await axios.post('https://fakestoreapi.com/users', {
      email: 'John@gmail.com',
      username: 'johnd',
      password: 'm38rmF$',
      name: {
        firstname: 'John',
        lastname: 'Doe',
      },
      address: {
        city: 'kilcoole',
        street: '7835 new road',
        number: 3,
        zipcode: '12926-3874',
        geolocation: {
          lat: '-37.3159',
          long: '81.1496',
        },
      },
      phone: '1-570-236-7033',
    });

    // Handle the response data
    console.log(response.data);
  } catch (error) {
    // Handle errors
    console.error('Error creating user:', error);
  }
};

// Call the function to create the user
createUser();
 {/* try {
      const response = await axios.post("https://fakestoreapi.com/users", {
        name: {
          firstname: newUser.firstname,
          lastname: newUser.lastname,
        },
        email: newUser.email,
        phone: newUser.phone,
        address: {
          street: newUser.address.street,
          city: newUser.address.city,
        },
      });

      setUsers([...users, response.data]);
      Swal.fire("Success", "New user added successfully!", "success");
      setIsAddingNewUser(false);
      setNewUser({
        firstname: "",
        lastname: "",
        email: "",
        phone: "",
        address: { street: "", city: "" },
      });
    } catch (error) {
      console.error("Error adding new user:", error);
      Swal.fire("Error", "There was an error adding the new user.", "error");
    } */

//// Login Page -------------------------------------------------------------------------
import axios from 'axios';
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";

const Login = ({ setIsLoggedIn }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post('https://fakestoreapi.com/auth/login', {
        email: email,
        password: password,
      });
      setIsLoggedIn(true);
      localStorage.setItem("isLoggedIn", "true"); // Store login status in localStorage
      navigate("/about");
    } catch (error) {
      setError("Invalid email or password.");
    }
  };

  return (
    <div className="login-container">
      <form onSubmit={handleSubmit}>
        <div className="container">
          <h1>Login</h1>
          <p>Please fill in this form to login.</p>
          <hr />
          <label htmlFor="exampleInputEmail1">Email address</label>
          <input
            type="email"
            id="exampleInputEmail1"
            placeholder="Enter Your Email Id"
            value={email}
            className="input"
            onChange={(e) => setEmail(e.target.value)}
            required
          />
          <label htmlFor="exampleInputPassword1">Password</label>
          <input
            type="password"
            className="input"
            id="exampleInputPassword1"
            placeholder="Enter Password Here"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          {error && <p style={{ color: "red" }}>{error}</p>}
          <button type="submit" className="btn-primary m-2">Submit</button>
          <Link to="/sign"><p>Sign Up</p></Link>
          <Link to="/product"><p>Forgot Password?</p></Link>
        </div>
      </form>
    </div>
  );
};
export default Login;

import axios from "axios";
import React, { useState } from "react";
import "./Signup.css";
import { useNavigate } from "react-router-dom";

const SignUp = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    repeatPassword: "",
    name: {
      firstname: "",
      lastname: "",
    },
    address: {
      city: "",
      street: "",
      number: "",
      zipcode: "",
      geolocation: {
        lat: "",
        long: "",
      },
    },
    phone: "",
    remember: true,
  });
  const [error, setError] = useState("");

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.includes(".")) {
      const [field, subField] = name.split(".");
      setFormData((prevData) => ({
        ...prevData,
        [field]: {
          ...prevData[field],
          [subField]: value,
        },
      }));
    } else {
      setFormData({
        ...formData,
        [name]: type === "checkbox" ? checked : value,
      });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Basic validation checks
    if (formData.password !== formData.repeatPassword) {
      setError("Passwords do not match");
      return;
    }
    if (!formData.email.includes("@")) {
      setError("Invalid email format");
      return;
    }

    const userData = {
      email: formData.email,
      username: formData.username,
      password: formData.password,
      name: {
        firstname: formData.name.firstname,
        lastname: formData.name.lastname,
      },
      address: {
        city: formData.address.city,
        street: formData.address.street,
        number: parseInt(formData.address.number, 10) || 0,
        zipcode: formData.address.zipcode,
        geolocation: {
          lat: formData.address.geolocation.lat,
          long: formData.address.geolocation.long,
        },
      },
      phone: formData.phone,
    };

    try {
      const response = await axios.post(
        "https://fakestoreapi.com/users",
        userData
      );
      console.log("User signed up:", response.data);
      setError("");
      setFormData({
        username: "",
        email: "",
        password: "",
        repeatPassword: "",
        name: { firstname: "", lastname: "" },
        address: {
          city: "",
          street: "",
          number: "",
          zipcode: "",
          geolocation: { lat: "", long: "" },
        },
        phone: "",
        remember: true,
      });
      navigate("/login");
    } catch (error) {
      console.error("Error during signup:", error);
      setError("Failed to sign up");
    }
  };

  const handleCancel = () => {
    // Reset form or navigate to another page
    navigate("/home"); // Example: Redirect to home page
  };

  return (
    <form onSubmit={handleSubmit} className="sign-up-form">
      <div className="container">
        <h1>Sign Up</h1>
        <p>Please fill in this form to create an account.</p>
        <hr />
        <label htmlFor="email">
          <b>Email</b>
        </label>
        <input
          type="email"
          placeholder="Enter Email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          className="input"
          required
        />

        <label htmlFor="username">
          <b>Username</b>
        </label>
        <input
          type="text"
          placeholder="Enter Username"
          name="username"
          value={formData.username}
          onChange={handleChange}
          className="input"
          required
        />

        {/* Name Section */}
        <label htmlFor="firstname">
          <b>First Name</b>
        </label>
        <input
          type="text"
          placeholder="Enter First Name"
          name="name.firstname"
          value={formData.name.firstname}
          onChange={handleChange}
          className="input"
          required
        />

        <label htmlFor="lastname">
          <b>Last Name</b>
        </label>
        <input
          type="text"
          placeholder="Enter Last Name"
          name="name.lastname"
          value={formData.name.lastname}
          onChange={handleChange}
          className="input"
          required
        />

        {/* Address Section */}
        <label htmlFor="city">
          <b>City</b>
        </label>
        <input
          type="text"
          placeholder="Enter City"
          name="address.city"
          value={formData.address.city}
          onChange={handleChange}
          className="input"
          required
        />

        <label htmlFor="street">
          <b>Street</b>
        </label>
        <input
          type="text"
          placeholder="Enter Street"
          name="address.street"
          value={formData.address.street}
          onChange={handleChange}
          className="input"
          required
        />

        <label htmlFor="number">
          <b>Street Number</b>
        </label>
        <input
          type="text"
          placeholder="Enter Number"
          name="address.number"
          value={formData.address.number}
          onChange={handleChange}
          className="input"
          required
        />

        <label htmlFor="zipcode">
          <b>Zipcode</b>
        </label>
        <input
          type="text"
          placeholder="Enter Zipcode"
          name="address.zipcode"
          value={formData.address.zipcode}
          onChange={handleChange}
          className="input"
          required
        />

        {/* Phone */}
        <label htmlFor="phone">
          <b>Phone Number</b>
        </label>
        <input
          type="tel"
          placeholder="Enter Phone Number"
          name="phone"
          value={formData.phone}
          onChange={handleChange}
          className="input"
          required
        />

        {/* Password Section */}
        <label htmlFor="password">
          <b>Password</b>
        </label>
        <input
          type="password"
          placeholder="Enter Password"
          name="password"
          value={formData.password}
          onChange={handleChange}
          className="input"
          required
        />

        <label htmlFor="repeatPassword">
          <b>Repeat Password</b>
        </label>
        <input
          type="password"
          placeholder="Repeat Password"
          name="repeatPassword"
          value={formData.repeatPassword}
          onChange={handleChange}
          className="input"
          required
        />

        {/* Remember Checkbox */}
        <label>
          <input
            type="checkbox"
            name="remember"
            checked={formData.remember}
            onChange={handleChange}
            style={{ marginBottom: "15px" }}
          />
          Remember me
        </label>

        {error && <p style={{ color: "red" }}>{error}</p>}

        <div className="clearfix">
          <button type="button" className="cancelbtn" onClick={handleCancel}>
            Cancel
          </button>
          <button type="submit" className="signupbtn">
            Sign Up
          </button>
        </div>
      </div>
    </form>
  );
};
export default SignUp;


import axios from "axios";
import React, { useState } from "react";
import "./Signup.css";
import { useNavigate } from "react-router-dom";

const Sign = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    repeatPassword: "",
    name: {
      firstname: "",
      lastname: "",
    },
    address: {
      city: "",
      street: "",
      number: "",
      zipcode: "",
      geolocation: {
        lat: "",
        long: "",
      },
    },
    phone: "",
    remember: true,
  });
  const [error, setError] = useState("");

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.includes(".")) {
      const [field, subField] = name.split(".");
      setFormData((prevData) => ({
        ...prevData,
        [field]: {
          ...prevData[field],
          [subField]: value,
        },
      }));
    } else {
      setFormData({
        ...formData,
        [name]: type === "checkbox" ? checked : value,
      });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Basic validation checks
    if (formData.password !== formData.repeatPassword) {
      setError("Passwords do not match");
      return;
    }
    if (!formData.email.includes("@")) {
      setError("Invalid email format");
      return;
    }

    const userData = {
      email: formData.email,
      username: formData.username,
      password: formData.password,
      name: {
        firstname: formData.name.firstname,
        lastname: formData.name.lastname,
      },
      address: {
        city: formData.address.city,
        street: formData.address.street,
        number: parseInt(formData.address.number, 10) || 0,
        zipcode: formData.address.zipcode,
        geolocation: {
          lat: formData.address.geolocation.lat,
          long: formData.address.geolocation.long,
        },
      },
      phone: formData.phone,
    };

    try {
      const response = await axios.post(
        "https://fakestoreapi.com/users",
        userData
      );
      console.log("User signed up:", response.data);
      
      // Save to localStorage
      localStorage.setItem("userData", JSON.stringify(userData));

      setError("");
      setFormData({
        username: "",
        email: "",
        password: "",
        repeatPassword: "",
        name: { firstname: "", lastname: "" },
        address: {
          city: "",
          street: "",
          number: "",
          zipcode: "",
          geolocation: { lat: "", long: "" },
        },
        phone: "",
        remember: true,
      });

      navigate("/profile");  // Navigate to profile page after signup
    } catch (error) {
      console.error("Error during signup:", error);
      setError("Failed to sign up");
    }
  };

  const handleCancel = () => {
    navigate("/home");
  };

  return (
    <form onSubmit={handleSubmit} className="sign-up-form">
      {/* form structure remains unchanged */}
    </form>
  );
};

export default Sign;

const handleSubmit = async (e) => {
    e.preventDefault();

    // Basic validation checks
    if (formData.password !== formData.repeatPassword) {
      setError("Passwords do not match");
      return;
    }
    if (!formData.email.includes("@")) {
      setError("Invalid email format");
      return;
    }

    const userData = {
      // Existing user data structure...
    };

    try {
      const response = await axios.post(
        "https://fakestoreapi.com/users",
        userData
      );
      console.log("User signed up:", response.data);
      
      // Save user ID to local storage
      localStorage.setItem("userId", response.data.id); // Assuming response contains an 'id'

      setError("");
      // Reset form...
      navigate("/login");
    } catch (error) {
      console.error("Error during signup:", error);
      setError("Failed to sign up");
    }
};



const handleSubmit = async (e) => {
    e.preventDefault();

    // Basic validation checks
    if (formData.password !== formData.repeatPassword) {
      setError("Passwords do not match");
      return;
    }
    if (!formData.email.includes("@")) {
      setError("Invalid email format");
      return;
    }

    const userData = {
      // Existing user data structure...
    };

    try {
      const response = await axios.post(
        "https://fakestoreapi.com/users",
        userData
      );
      console.log("User signed up:", response.data);
      
      // Save user ID to local storage
      localStorage.setItem("userId", response.data.id); // Assuming response contains an 'id'

      setError("");
      // Reset form...
      navigate("/login");
    } catch (error) {
      console.error("Error during signup:", error);
      setError("Failed to sign up");
    }
};
